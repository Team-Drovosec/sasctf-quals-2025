from z3 import *
from binascii import hexlify

# 16 unknown password bytes
data = [BitVec(f'd{i}', 8) for i in range(16)]
d = data        # alias for shorter access (d[0] to d[15])

s = Solver()

# ----------- 1.
s.add( ((d[9]  | d[0])  ^ (d[12] ^ (d[15] ^ d[1])))             == 196 )

# ----------- 2.
s.add( (((d[15] + d[14]) & d[8]))                               ==   0 )

# ----------- 3.
s.add( ((((d[13] | d[3]) + (d[11] + d[6])) | (d[9] + d[11]))    ==  50) )

# ----------- 4.
s.add( ((((d[11] | d[12]) & (d[3] | d[7])) | (d[4] | d[10]))    == 238) )

# ----------- 5.
s.add( (((d[8]  | d[9])  ^ d[6])                                ==  56) )

# ----------- 6.
s.add( (((d[3]  ^ d[14]) ^ d[10])                               ==  88) )

# ----------- 7.
s.add( ((((d[1] ^ d[15]) | d[13]) + (d[1] ^ d[12]))             ==  69) )

# ----------- 8.
s.add( ((((d[11] & d[8]) | (d[14] | d[0])) ^ (d[9] | d[2]))     ==  69) )

# ----------- 9.
s.add( ((((d[8] + d[0]) ^ (d[8] | d[9])) + (d[7] & d[0]))       ==  24) )

# ----------- 10.
s.add( (((d[15] | d[14]) | d[12])                               == 255) )

# ----------- 11.
s.add( ((((d[11] & d[5]) ^ d[4]) | (d[4] & d[6]))               == 230) )

# ----------- 12.
s.add( (((d[3] + d[0]) + (d[4] + d[13]))                        ==  15) )

# ----------- 13.
s.add( ((d[15] & d[13])                                         ==   4) )

# ----------- 14.
s.add( ((d[4]  ^ d[7])                                          == 214) )

# ----------- 15.
s.add( ((d[12] & d[4])                                          ==   6) )

# ----------- 16.
s.add( ((d[8]  + d[6])                                          ==  36) )

# ----------- 17.
s.add( ((d[10] & d[12])                                         ==   6) )

# ----------- 18.
s.add( ((d[15] ^ d[10])                                         == 144) )

# ----------- 19.
s.add( ((((d[11] & d[10]) & d[3]) | (d[9] ^ d[7]))              == 226) )

# ----------- 20.
s.add( ((((d[2] | d[5]) & d[1]) + (d[3] & d[7]))                ==   9) )

# ----------- 21.
s.add( (((d[1] & d[11]) + (d[15] ^ d[3]) + (d[12] + d[5]))      == 203) )

# ----------- 22.
s.add( (((d[0] + d[13]) & d[9])                                 ==  26) )

# ----------- 23.
s.add( ((((d[3] + d[12]) + (d[6] + d[4])) | (d[13] + d[11]))    == 191) )

# ----------- 24.
s.add( (((d[15] ^ d[3]) + (d[8] + d[11]))                       == 221) )

# ----------- 25.
s.add( (((d[5] + d[2]) + d[8])                                  == 234) )

# ----------- 26.
s.add( (((d[2] | d[10]) | (d[1] & d[3]))                        == 167) )

# ----------- 27.
s.add( (((d[7] & d[3]) | d[3])                                  ==  34) )

# ----------- 28.
s.add( (((d[0] | d[7]) + d[3])                                  == 252) )

# ----------- 29.
s.add( ((((d[1] | d[5]) | (d[8] ^ d[10])) ^ (d[3] & d[8]))      == 207) )

# ----------- 30.
s.add( ((((d[6] + d[4]) & (d[12] & d[14])) ^ (d[13] | d[6]))    == 135) )

# ----------- 31.
s.add( ((((d[4] | d[8]) & (d[13] & d[12])) + (d[12] | d[2]))    == 172) )

# ----------- 32.
s.add( (((d[13] + d[9]) & d[1])                                 ==  15) )

# ----------- 33.
s.add( (((d[14] | d[5]) & (d[9] | d[14]))                       == 252) )

# ----------- 34.
s.add( (((d[13] | d[8]) + d[0])                                 == 127) )

# ----------- 35.
s.add( (((d[11] ^ d[9]) ^ d[12])                                == 149) )

# ----------- 36.
s.add( ((((d[3] & d[2]) | (d[12] | d[8])) + (d[0] ^ d[10]))     == 163) )

# ---------------------------------------------------------------
print("satisfiable?" , s.check())
if s.check() == sat:
    m = s.model()
    print(hexlify(bytes([m[d[i]].as_long() for i in range(16)])))
